package account;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.log4j.Log4j2;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
import org.springframework.context.event.EventListener;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.repository.reactive.ReactiveCrudRepository;
import org.springframework.http.MediaType;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Flux;

import java.time.Duration;
import java.time.Instant;
import java.util.stream.Stream;

/**
 * Application entrypoint
 *
 * @author ncarll
 * @implNote @EnableDiscoveryClient autoconfiguration registers this service with Eureka
 */
@EnableDiscoveryClient
@SpringBootApplication
public class AccountServiceApplication {

    /**
     * Main method
     *
     * @param args Program args
     */
    public static void main(final String[] args) {
        SpringApplication.run(AccountServiceApplication.class, args);
    }
}

/**
 * Save data to the database on startup
 *
 * @implNote @Log4j2 used here for method reference logging
 */
@Log4j2
@Component
@RequiredArgsConstructor
class SampleDataInitializer {

    private final AccountRepository accountRepository;

    @EventListener(ApplicationReadyEvent.class)
    public void init() {

        /*
         * Create a publisher that:
         * - consists of an arbitrary array of strings
         * - maps the array of strings to new accounts *NOTE: create with NULL ID to have Mongo generate one
         * - flatMaps the publisher (get account object) and calls repository.save() for each
         */
        final var saved = Flux
                .just("Josh", "Paul", "Rando", "Stephan", "Meghan")
                .map(name -> new Account(null, name))
                .flatMap(accountRepository::save);

        /*
         * Delete all items in the repository,
         * Complete the above flux, then play another publisher,
         * Get all accounts in repository, creating Flux<Account>,
         * Subscribe a consumer (method ref to logger.info()) for all elements
         */
        accountRepository
                .deleteAll()
                .thenMany(saved)
                .thenMany(accountRepository.findAll())
                .subscribe(logger::info);
    }
}

/**
 * Representation of an account
 *
 * @implNote ID generated by Mongo
 */
@Data
@Document
@AllArgsConstructor
@RequiredArgsConstructor
class Account {

    @Id
    private String id;
    private String name;
}

/**
 * Repository for accounts
 *
 * @implNote ReactiveCrudRepository does not support paging/sorting.  Flux ~ streams.  The entire result of a
 * query may NOT be given all at once, depending on backpressure and rate of retrieval.  This is NON BLOCKING
 */
interface AccountRepository extends ReactiveCrudRepository<Account, String> {

}

/**
 * HTTP controller for /account
 */
@RestController
@RequiredArgsConstructor
class AccountController {

    private final AccountRepository accountRepository;
    private final IntervalMessageProducer producer;

    /**
     * Get all accounts in the database
     *
     * @return Account flux
     * @implNote We don't have to worry about synchronization.  Spring handles subscribing to this publisher and
     * writes a HTTP response when the subscription terminates
     */
    @GetMapping("/account/all")
    Flux<Account> accountPublisher() {
        return accountRepository.findAll();
    }

    /**
     * Create an infinite stream of data published every second
     *
     * @param name Name to include in published data
     * @return One-way event stream of string data
     */
    @GetMapping(produces = MediaType.TEXT_EVENT_STREAM_VALUE, value = "/account/sse/{name}")
    public Flux<String> ssePublisher(@PathVariable final String name) {
        return producer.produce(name);
    }
}

/**
 * Create data published at a specific interval
 */
@Slf4j
@Component
class IntervalMessageProducer {

    /**
     * Generate an infinite stream of strings including input name and current timestamp, interval of one second
     *
     * @param name Arbitrary string value to include for fun
     * @return Infinite flux of strings
     */
    Flux<String> produce(final String name) {
        logger.info("Producing data stream for {}", name);
        return Flux.fromStream(Stream.generate(() -> "Hello " + name + " @ " + Instant.now()))
                .delayElements(Duration.ofSeconds(1));
    }
}

/**
 * RSocket controller
 */
@Controller
@RequiredArgsConstructor
class RSocketAccountController {

    private final IntervalMessageProducer intervalMessageProducer;

    /**
     * Respond to a RSocket request to "account" by creating an infinite stream of data
     *
     * @param name Name to include in string data
     * @return Infinite flux of strings
     * @apiNote This message mapping produces the same content as /account/sse/{name}, except it is designed for
     * server-to-server communication.  The profile-service consumes this flux over TCP
     */
    @MessageMapping("account")
    Flux<String> getAccounts(final String name) {
        return intervalMessageProducer.produce(name);
    }
}